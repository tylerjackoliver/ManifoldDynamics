% Defines the model of the CR3BP for use in numerical integration subroutines
% Assumes notations and normalisations as found in report
% Last revised: 5/8/17.

% function xdot = cr3bpModel(t, x, a)			% Define inputs as time, state matrix, and argument to shift model behaviour at end of integration.
% 	global massParam								% Define global mass parameter
%  global mu 
								% If integration flag is 0
% 		m1 = 1-mu;								% Set mass m1 from mu
% 		m2 = mu;								% Set mass m2 from mu
% 
% 		r13 = ((x(1)+m2)^2 + x(2)^2)^1.5;					% Distance from particle to m1 (> m2)
% 		r23 = ((x(1)-m1)^2 + x(2)^2)^1.5;					% Distance from particle to m2 (<m1)
% 
% 		ux = -x(1) + m1*(x(1)+m2)/r13 + m2*(x(1) - m1)/r23;			% Partial derivative of u wrt x
% 		uy = -x(2) + m1*x(2)/r13 + m2*x(2)/r23;					% Partial derivative of u wrt y
% 
% 		xdot = zeros(4, 1);							% Set up state derivative matrix
% 		xdot(1) = x(3);								% == x_dot
% 		xdot(2) = x(4);								% == y_dot
% 		xdot(3) = 2*x(4) - ux;							% == x-acceleration, from gov. equation
% 		xdot(4) = -2*x(3) - uy;							% == y-accel, from gov. equation
% 
%    end
function [out1,out2,out3] = pcr3bp(t,x,flag)

global param

mu = param ; % mass paramater

if nargin < 3 || isempty(flag)

mu1 = 1-mu; % mass of larger  primary (nearest origin on left)
mu2 =   mu; % mass of smaller primary (furthest from origin on right)

r3= ((x(1)+mu2)^2 + x(2)^2 )^1.5;     % r: distance to m1, LARGER MASS
R3= ((x(1)-mu1)^2 + x(2)^2 )^1.5;     % R: distance to m2, smaller mass

Ux = - x(1) + mu1*(x(1)+mu2)/r3 + mu2*(x(1)-mu1)/R3 ;
Uy = - x(2) + mu1* x(2)     /r3 + mu2* x(2)     /R3 ;

xdot = zeros(4,1);
xdot(1) = x(3);
xdot(2) = x(4);
xdot(3) = 2*x(4) - Ux ;
xdot(4) =-2*x(3) - Uy ;

out1 = xdot;

%-----------------------------------------------------------
else

  switch (flag)

    case 'events',

    if abs(t) > 1.e-2, % wait a short time before checking
      isterminal = 1;
    else
      isterminal = 0;
    end

    direction = -1;

    % check for x-axis crossing (x(2) = 0)

    out1 = x(2) ;
    out2 = isterminal ;
    out3 = direction ;

  end

end

end
